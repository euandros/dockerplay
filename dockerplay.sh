#!/bin/bash

set -e

# Tratamento de interrup√ß√£o
trap cleanup EXIT
trap 'echo -e "\n‚ö†Ô∏è Script interrompido pelo usu√°rio"; exit 1' INT

# Cores para melhor visualiza√ß√£o
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√µes para feedback visual
show_progress() {
    echo -e "\n${BLUE}‚è≥ $1${NC}"
}

show_success() {
    echo -e "\n${GREEN}‚úÖ $1${NC}"
}

show_error() {
    echo -e "\n${RED}‚ùå $1${NC}"
}

show_section() {
    local title=$1
    echo -e "\n\n${YELLOW}=== $title ===${NC}\n"
}

# Fun√ß√£o para criar um frame visual para a sa√≠da
show_command_output() {
    local output=$1
    local width=80
    
    echo -e "\nüìã Sa√≠da do comando:"
    echo "‚îå$([[ $width -gt 0 ]] && printf '‚îÄ%.0s' $(seq 1 $width))‚îê"
    
    while IFS= read -r line; do
        printf "‚îÇ %-${width}s ‚îÇ\n" "${line:0:$width}"
    done <<< "$output"
    
    echo "‚îî$([[ $width -gt 0 ]] && printf '‚îÄ%.0s' $(seq 1 $width))‚îò"
    echo
}

# Fun√ß√µes para mostrar dicas e explica√ß√µes
show_tip() {
    echo -e "\n${BLUE}üí° Dica: $1${NC}"
}

show_explanation() {
    echo -e "\n${YELLOW}üìö Explica√ß√£o: $1${NC}"
}

show_objective() {
    echo -e "\n${GREEN}üéØ Objetivo: $1${NC}"
}

show_command_help() {
    echo -e "\n${YELLOW}üìñ Ajuda:${NC}"
    echo -e "$1"
}

# Fun√ß√£o de limpeza global
cleanup() {
    show_section "Limpeza do Ambiente"
    
    # Verifica Docker Compose
    if [ -f "docker-compose.yml" ]; then
        show_progress "Limpando recursos do Docker Compose..."
        docker-compose down -v 2>/dev/null || true
        rm -f docker-compose.yml 2>/dev/null || true
        show_success "Recursos do Docker Compose limpos!"
    fi

    # Verifica containers em execu√ß√£o
    if docker ps -q &>/dev/null; then
        show_progress "Parando containers em execu√ß√£o..."
        docker stop $(docker ps -q) 2>/dev/null || true
        show_success "Containers parados!"
    fi

    # Remove containers parados
    if docker ps -aq &>/dev/null; then
        show_progress "Removendo containers parados..."
        docker rm $(docker ps -aq) 2>/dev/null || true
        show_success "Containers removidos!"
    fi

    # Remove volumes n√£o utilizados
    if docker volume ls -q &>/dev/null; then
        show_progress "Removendo volumes n√£o utilizados..."
        docker volume prune -f 2>/dev/null || true
        show_success "Volumes removidos!"
    fi

    # Remove redes n√£o utilizadas
    if docker network ls --filter "type=custom" -q &>/dev/null; then
        show_progress "Removendo redes n√£o utilizadas..."
        docker network prune -f 2>/dev/null || true
        show_success "Redes removidas!"
    fi

    # Remove arquivos tempor√°rios
    local temp_files=(app.py requirements.txt Dockerfile)
    for file in "${temp_files[@]}"; do
        if [ -f "$file" ]; then
            rm -f "$file"
        fi
    done

    show_success "Limpeza conclu√≠da!"
}

# Fun√ß√£o para executar comando com timeout
execute_with_timeout() {
    local cmd=$1
    local timeout=${2:-30}
    local description=${3:-"comando"}
    
    show_progress "Executando $description..."
    timeout $timeout bash -c "$cmd" || {
        show_error "O $description excedeu o tempo limite de $timeout segundos"
        return 1
    }
}

# Verifica√ß√µes iniciais
check_requirements() {
    show_section "Verifica√ß√£o de Requisitos"
    local missing_requirements=false

    show_objective "Verificar se todos os componentes necess√°rios est√£o instalados e funcionando"

    # Verifica Docker
    if ! command -v docker &> /dev/null; then
        show_error "Docker n√£o est√° instalado"
        show_tip "Instale o Docker seguindo as instru√ß√µes em: https://docs.docker.com/get-docker/"
        show_command_help "Para instalar no Ubuntu: sudo apt-get install docker.io"
        missing_requirements=true
    else
        local docker_version=$(docker --version)
        show_success "Docker est√° instalado ($docker_version)"
    fi

    # Verifica Docker daemon
    if ! docker info &> /dev/null; then
        show_error "O daemon do Docker n√£o est√° rodando"
        show_tip "Inicie o servi√ßo do Docker:"
        show_command_help "Linux: sudo systemctl start docker
Windows/Mac: Inicie o Docker Desktop"
        missing_requirements=true
    else
        show_success "Docker daemon est√° rodando"
    fi

    # Verifica permiss√µes do usu√°rio
    if ! docker info &> /dev/null && [ "$EUID" -ne 0 ]; then
        show_error "Usu√°rio atual n√£o tem permiss√£o para executar comandos Docker"
        show_tip "Adicione seu usu√°rio ao grupo docker:"
        show_command_help "sudo usermod -aG docker $USER
Depois, fa√ßa logout e login novamente"
        missing_requirements=true
    fi

    if [ "$missing_requirements" = true ]; then
        show_error "Por favor, instale/configure os requisitos faltantes e tente novamente"
        return 1
    fi

    show_success "Todos os requisitos est√£o satisfeitos!"
    echo -e "\n----------------------------------------\n"
    return 0
}

# Fun√ß√£o para validar se o comando foi realmente executado
validate_command_execution() {
    local expected_command=$1
    local actual_command
    
    # Mostra o comando esperado de forma destacada
    echo -e "\n${YELLOW}Comando esperado:${NC} $expected_command"
    
    # Se houver uma descri√ß√£o do comando, mostra
    if [ -n "$2" ]; then
        show_command_help "$2"
    fi
    
    read -p "üîµ Digite o comando: " actual_command
    
    # Remove espa√ßos extras e normaliza o comando
    actual_command=$(echo "$actual_command" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
    expected_command=$(echo "$expected_command" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
    
    if [[ "$actual_command" != "$expected_command" ]]; then
        show_error "Comando incorreto!"
        echo -e "\nEsperado: $expected_command"
        echo "Digitado: $actual_command"
        show_tip "Digite o comando exatamente como mostrado"
        return 1
    fi
    
    return 0
}

# Fun√ß√£o para verificar comando e sa√≠da com feedback educacional
check_command_and_output() {
    local expected_command=$1
    local expected_output=$2
    local error_message=$3
    local check_type=${4:-output}
    local command_explanation=$5
    local error_explanation=$6
    local success_explanation=$7
    local command_help=$8

    local command_executed=false
    local output
    local return_code

    if [ -n "$command_explanation" ]; then
        show_explanation "$command_explanation"
    fi

    while [ "$command_executed" = false ]; do
        if ! validate_command_execution "$expected_command" "$command_help"; then
            if [ -n "$error_explanation" ]; then
                show_tip "$error_explanation"
            fi
            continue
        fi

        show_progress "Executando comando..."
        output=$(eval "$expected_command" 2>&1)
        return_code=$?

        show_command_output "$output"

        if [ $return_code -ne 0 ]; then
            show_error "$error_message"
            if [ -n "$error_explanation" ]; then
                show_tip "$error_explanation"
            fi
            continue
        fi

        if [ "$check_type" = "output" ]; then
            if [[ ! "$output" =~ $expected_output ]]; then
                show_error "A sa√≠da n√£o √© a esperada"
                if [ -n "$error_explanation" ]; then
                    show_tip "$error_explanation"
                fi
                continue
            fi
        elif [ "$check_type" = "exists" ] && [ -z "$output" ]; then
            show_error "$error_message"
            if [ -n "$error_explanation" ]; then
                show_tip "$error_explanation"
            fi
            continue
        fi

        command_executed=true
    done

    show_success "Comando executado com sucesso!"
    if [ -n "$success_explanation" ]; then
        show_explanation "$success_explanation"
    fi
    echo -e "\n----------------------------------------\n"
    return 0
}

# --- N√≠vel 1 - B√°sico ---
nivel_1() {
    show_section "N√≠vel 1 - Comandos B√°sicos do Docker"
    
    show_objective "Neste n√≠vel, voc√™ aprender√° os comandos b√°sicos do Docker"
    show_explanation "Vamos come√ßar com comandos simples e fundamentais do Docker"
    
    # Limpeza inicial
    show_progress "Verificando ambiente anterior..."
    if docker ps -a | grep -qE 'hello|meu_ubuntu'; then
        show_progress "Containers anteriores encontrados, removendo..."
        docker stop meu_ubuntu hello 2>/dev/null || true
        docker rm meu_ubuntu hello 2>/dev/null || true
        show_success "Containers anteriores removidos!"
    fi

    # Verificar e remover imagens anteriores
    if docker images | grep -q "hello-world"; then
        show_progress "Imagem hello-world encontrada, removendo..."
        docker rmi hello-world 2>/dev/null || true
        show_success "Imagem anterior removida!"
    fi

    echo -e "\n1. Baixar imagem hello-world"
    show_objective "Baixar uma imagem b√°sica do Docker Hub"
    check_command_and_output \
        "docker pull hello-world" \
        "Downloaded newer image|Image is up to date" \
        "Erro ao baixar a imagem" \
        "output" \
        "O comando 'docker pull' baixa imagens do Docker Hub" \
        "Verifique sua conex√£o com a internet" \
        "Imagem hello-world baixada com sucesso!"

    echo -e "\n2. Executar hello-world"
    show_objective "Criar e executar seu primeiro container Docker"
    check_command_and_output \
        "docker run --name hello hello-world" \
        "Hello from Docker!" \
        "Erro ao executar a imagem" \
        "output" \
        "O comando 'docker run' cria e inicia um novo container" \
        "Verifique se a imagem foi baixada corretamente" \
        "Primeiro container executado com sucesso!"

    echo -e "\n3. Verificar imagem Ubuntu"
    show_objective "Garantir que temos a imagem Ubuntu dispon√≠vel"
    if ! docker images | grep -q "ubuntu"; then
        show_progress "Baixando imagem Ubuntu..."
        check_command_and_output \
            "docker pull ubuntu" \
            "Downloaded newer image|Image is up to date" \
            "Erro ao baixar a imagem Ubuntu" \
            "output" \
            "Precisamos da imagem Ubuntu para o pr√≥ximo exerc√≠cio" \
            "Verifique sua conex√£o com a internet" \
            "Imagem Ubuntu baixada com sucesso!"
    fi

    echo -e "\n4. Executar container Ubuntu com logs"
    show_objective "Criar um container mais complexo que gera logs"
    check_command_and_output \
        "docker run -d --name meu_ubuntu ubuntu sh -c 'while true; do echo \"Container em execu√ß√£o\"; sleep 5; done'" \
        "[0-9a-f]" \
        "Erro ao criar o container" \
        "output" \
        "Este comando cria um container Ubuntu que gera logs periodicamente" \
        "Verifique se a imagem ubuntu existe localmente" \
        "Container Ubuntu criado com sucesso!"

    # Aguarda para garantir que logs foram gerados
    sleep 6

    echo -e "\n5. Listar containers em execu√ß√£o"
    show_objective "Aprender a listar containers ativos"
    check_command_and_output \
        "docker ps" \
        "meu_ubuntu" \
        "Container n√£o est√° rodando" \
        "output" \
        "O comando 'docker ps' lista containers em execu√ß√£o" \
        "Verifique se o container foi iniciado corretamente" \
        "Containers listados com sucesso!"

    echo -e "\n6. Verificar logs do container Ubuntu"
    show_objective "Aprender a verificar logs de containers"
    check_command_and_output \
        "docker logs meu_ubuntu" \
        "Container em execu√ß√£o" \
        "Erro ao verificar logs" \
        "output" \
        "O comando 'docker logs' mostra os logs do container" \
        "Verifique se o nome do container est√° correto" \
        "Logs verificados com sucesso!"

    echo -e "\n7. Parar o container Ubuntu"
    show_objective "Aprender a parar containers em execu√ß√£o"
    check_command_and_output \
        "docker stop meu_ubuntu" \
        "meu_ubuntu" \
        "Erro ao parar o container" \
        "output" \
        "O comando 'docker stop' para a execu√ß√£o de um container" \
        "Verifique se o nome do container est√° correto" \
        "Container parado com sucesso!"

    echo -e "\n8. Remover containers"
    show_objective "Aprender a remover containers que n√£o s√£o mais necess√°rios"
    check_command_and_output \
        "docker rm meu_ubuntu hello" \
        "meu_ubuntu|hello" \
        "Erro ao remover os containers" \
        "output" \
        "O comando 'docker rm' remove containers parados" \
        "Certifique-se que os containers est√£o parados" \
        "Containers removidos com sucesso!"

    echo -e "\n9. Remover imagem hello-world"
    show_objective "Aprender a gerenciar imagens locais"
    check_command_and_output \
        "docker rmi hello-world" \
        "Untagged: hello-world:latest|Deleted:" \
        "Erro ao remover a imagem" \
        "output" \
        "O comando 'docker rmi' remove imagens locais" \
        "Verifique se n√£o h√° containers usando esta imagem" \
        "Imagem removida com sucesso!"

    show_success "N√≠vel 1 conclu√≠do com sucesso!"
    show_explanation "Voc√™ aprendeu os comandos b√°sicos para gerenciar containers e imagens Docker"
    echo -e "\n----------------------------------------\n"
}

# --- N√≠vel 2 - Intermedi√°rio ---
nivel_2() {
    show_section "N√≠vel 2 - Volumes, Redes e Vari√°veis de Ambiente"
    
    show_objective "Neste n√≠vel, voc√™ aprender√° conceitos mais avan√ßados do Docker"
    show_explanation "Vamos trabalhar com persist√™ncia de dados, comunica√ß√£o entre containers e configura√ß√£o de ambiente"

    local VOLUME_NAME="meu_volume"
    local CONTAINER_NAME="meu_container"
    local NETWORK_NAME="minha_rede"

    # Limpeza inicial
    show_progress "Preparando ambiente..."
    
    # Limpa volumes anteriores
    if docker volume ls | grep -q "$VOLUME_NAME"; then
        show_progress "Volume anterior encontrado, removendo..."
        docker volume rm "$VOLUME_NAME" 2>/dev/null || true
    fi

    # Limpa redes anteriores
    if docker network ls | grep -q "$NETWORK_NAME"; then
        show_progress "Rede anterior encontrada, removendo..."
        docker network rm "$NETWORK_NAME" 2>/dev/null || true
    fi

    echo -e "\n1. Criar volume Docker"
    show_objective "Aprender a criar volumes para persist√™ncia de dados"
    
    check_command_and_output \
        "docker volume create $VOLUME_NAME" \
        "$VOLUME_NAME" \
        "Erro ao criar o volume" \
        "output" \
        "Volumes permitem que dados persistam mesmo ap√≥s a remo√ß√£o do container" \
        "Verifique se n√£o h√° outro volume com o mesmo nome" \
        "Volume criado com sucesso!" \
        "docker volume create : Cria um novo volume
docker volume ls : Lista volumes
docker volume inspect : Mostra detalhes do volume"

    echo -e "\n2. Listar volumes"
    show_objective "Verificar volumes dispon√≠veis"
    
    check_command_and_output \
        "docker volume ls" \
        "$VOLUME_NAME" \
        "Volume n√£o encontrado" \
        "output" \
        "Este comando lista todos os volumes Docker dispon√≠veis" \
        "O volume deve aparecer na listagem" \
        "Volume listado com sucesso!" \
        "docker volume ls : Lista todos os volumes
docker volume ls -q : Lista apenas os nomes dos volumes"

    echo -e "\n3. Criar container com volume"
    show_objective "Aprender a montar volumes em containers"
    
    check_command_and_output \
        "docker run -d --name $CONTAINER_NAME -v $VOLUME_NAME:/data ubuntu sleep infinity" \
        "[0-9a-f]" \
        "Erro ao criar o container com volume" \
        "output" \
        "O par√¢metro -v monta o volume no diret√≥rio /data do container" \
        "Verifique se o volume foi criado corretamente" \
        "Container criado com volume montado!" \
        "docker run -v : Monta um volume no container
[VOLUME]:[CAMINHO] : Define onde o volume ser√° montado"

    echo -e "\n4. Criar arquivo no volume"
    show_objective "Testar a persist√™ncia de dados no volume"
    
    check_command_and_output \
        "docker exec $CONTAINER_NAME sh -c 'echo \"teste\" > /data/arquivo.txt'" \
        "" \
        "Erro ao criar arquivo" \
        "exists" \
        "Vamos criar um arquivo dentro do volume para testar a persist√™ncia" \
        "Verifique se o container est√° rodando" \
        "Arquivo criado com sucesso!" \
        "docker exec : Executa um comando no container
-i : Modo interativo
-t : Aloca um pseudo-TTY"

    echo -e "\n5. Verificar conte√∫do do arquivo"
    show_objective "Confirmar que o arquivo foi criado"
    
    check_command_and_output \
        "docker exec $CONTAINER_NAME cat /data/arquivo.txt" \
        "teste" \
        "Arquivo n√£o encontrado" \
        "output" \
        "Vamos ler o conte√∫do do arquivo criado" \
        "Verifique se o arquivo foi criado corretamente" \
        "Arquivo lido com sucesso!" \
        "cat : Mostra o conte√∫do do arquivo
ls /data : Lista arquivos no diret√≥rio"

    echo -e "\n6. Criar rede Docker"
    show_objective "Aprender a criar redes para comunica√ß√£o entre containers"
    
    check_command_and_output \
        "docker network create $NETWORK_NAME" \
        "[0-9a-f]" \
        "Erro ao criar a rede" \
        "output" \
        "Redes Docker permitem que containers se comuniquem entre si" \
        "Verifique se n√£o h√° outra rede com o mesmo nome" \
        "Rede criada com sucesso!" \
        "docker network create : Cria uma nova rede
docker network ls : Lista redes
docker network inspect : Mostra detalhes da rede"

    echo -e "\n7. Criar container na rede"
    show_objective "Aprender a conectar containers √† rede"
    
    check_command_and_output \
        "docker run -d --name webserver --network $NETWORK_NAME nginx" \
        "[0-9a-f]" \
        "Erro ao criar container na rede" \
        "output" \
        "Vamos criar um container nginx conectado √† nossa rede" \
        "Verifique se a rede foi criada corretamente" \
        "Container criado e conectado √† rede!" \
        "docker run --network : Conecta container √† rede
--network-alias : Define um alias para o container na rede"

    # Limpeza final
    show_progress "Realizando limpeza..."
    docker stop $CONTAINER_NAME webserver 2>/dev/null || true
    docker rm $CONTAINER_NAME webserver 2>/dev/null || true
    docker volume rm $VOLUME_NAME 2>/dev/null || true
    docker network rm $NETWORK_NAME 2>/dev/null || true

    show_success "N√≠vel 2 conclu√≠do com sucesso!"
    show_explanation "Voc√™ aprendeu sobre volumes para persist√™ncia de dados e redes para comunica√ß√£o entre containers"
    echo -e "\n----------------------------------------\n"
}

# --- N√≠vel 3 - Dockerfile ---
nivel_3() {
    show_section "N√≠vel 3 - Cria√ß√£o de Imagens com Dockerfile"
    
    show_objective "Neste n√≠vel, voc√™ aprender√° a criar suas pr√≥prias imagens Docker"
    show_explanation "O Dockerfile √© um arquivo de configura√ß√£o que cont√©m instru√ß√µes para construir uma imagem Docker"

    # Limpeza inicial
    show_progress "Preparando ambiente..."
    local files_to_clean=(app.py requirements.txt Dockerfile)
    for file in "${files_to_clean[@]}"; do
        [ -f "$file" ] && rm -f "$file"
    done

    # Remove imagem anterior se existir
    if docker images | grep -q "minha_app"; then
        show_progress "Removendo imagem anterior..."
        docker rmi minha_app 2>/dev/null || true
    fi

    echo -e "\n1. Criar aplica√ß√£o Python simples"
    show_objective "Preparar uma aplica√ß√£o simples para containeriza√ß√£o"
    
    show_progress "Criando app.py..."
    cat > app.py << 'EOF'
# Aplica√ß√£o Python simples
print("Ol√°! Esta √© uma aplica√ß√£o Python em um container Docker!")
EOF

    show_progress "Criando requirements.txt..."
    touch requirements.txt

    show_success "Arquivos da aplica√ß√£o criados!"
    show_explanation "Criamos uma aplica√ß√£o Python simples e um arquivo de depend√™ncias vazio"

    echo -e "\n2. Criar Dockerfile"
    show_objective "Aprender a escrever um Dockerfile b√°sico"
    show_explanation "O Dockerfile define como sua aplica√ß√£o ser√° empacotada"

    show_command_help "Um Dockerfile b√°sico deve conter:
FROM : Define a imagem base
WORKDIR : Define o diret√≥rio de trabalho
COPY : Copia arquivos para a imagem
RUN : Executa comandos durante a constru√ß√£o
CMD : Define o comando padr√£o do container"

    show_progress "Criando Dockerfile..."
    cat > Dockerfile << 'EOF'
# Usa Python 3.9 como base
FROM python:3.9-slim

# Define o diret√≥rio de trabalho
WORKDIR /app

# Copia os arquivos necess√°rios
COPY app.py .
COPY requirements.txt .

# Instala as depend√™ncias
RUN pip install --no-cache-dir -r requirements.txt

# Define o comando padr√£o
CMD ["python", "app.py"]
EOF

    show_success "Dockerfile criado!"
    
    echo -e "\n3. Verificar estrutura do Dockerfile"
    show_objective "Entender cada instru√ß√£o do Dockerfile"
    
    check_command_and_output \
        "cat Dockerfile" \
        "FROM python" \
        "Dockerfile n√£o encontrado" \
        "output" \
        "Vamos analisar o conte√∫do do Dockerfile" \
        "Verifique se o arquivo foi criado corretamente" \
        "Este √© um Dockerfile b√°sico para uma aplica√ß√£o Python" \
        "FROM : Imagem base
WORKDIR : Diret√≥rio de trabalho
COPY : Copia arquivos
RUN : Executa comandos
CMD : Comando padr√£o"

    echo -e "\n4. Construir imagem"
    show_objective "Aprender a construir uma imagem a partir do Dockerfile"
    
    check_command_and_output \
        "docker build -t minha_app ." \
        "Successfully built" \
        "Erro ao construir a imagem" \
        "output" \
        "O comando 'docker build' cria uma imagem a partir do Dockerfile" \
        "Verifique se todos os arquivos necess√°rios est√£o presentes" \
        "Imagem constru√≠da com sucesso!" \
        "docker build : Constr√≥i uma imagem
-t : Define uma tag/nome
. : Usa o diret√≥rio atual"

    echo -e "\n5. Verificar imagem criada"
    show_objective "Aprender a listar e verificar imagens"
    
    check_command_and_output \
        "docker images minha_app" \
        "minha_app" \
        "Imagem n√£o encontrada" \
        "output" \
        "Vamos verificar se a imagem foi criada corretamente" \
        "A imagem deve aparecer na listagem" \
        "Imagem encontrada!" \
        "docker images : Lista imagens
docker image inspect : Mostra detalhes da imagem"

    echo -e "\n6. Executar container com a nova imagem"
    show_objective "Testar a imagem criada"
    
    check_command_and_output \
        "docker run --name minha_app_container minha_app" \
        "Ol√°!" \
        "Erro ao executar o container" \
        "output" \
        "Vamos executar um container com nossa imagem" \
        "Verifique se a imagem foi constru√≠da corretamente" \
        "Aplica√ß√£o executada com sucesso!" \
        "docker run : Cria e inicia um container
--name : Define um nome para o container"

    # Limpeza final
    show_progress "Realizando limpeza..."
    docker rm minha_app_container 2>/dev/null || true
    docker rmi minha_app 2>/dev/null || true
    rm -f "${files_to_clean[@]}" 2>/dev/null || true

    show_success "N√≠vel 3 conclu√≠do com sucesso!"
    show_explanation "Voc√™ aprendeu a criar suas pr√≥prias imagens Docker usando Dockerfile"
    echo -e "\n----------------------------------------\n"
}

# Fun√ß√£o principal
main() {
    clear
    show_section "Tutorial Interativo Docker"
    
    show_explanation "Este tutorial ir√° gui√°-lo atrav√©s dos conceitos fundamentais do Docker.

O tutorial est√° dividido em 3 n√≠veis:

1. B√°sico
   - Comandos essenciais do Docker
   - Gerenciamento de containers
   - Manipula√ß√£o de imagens

2. Intermedi√°rio
   - Volumes para persist√™ncia de dados
   - Redes Docker
   - Vari√°veis de ambiente

3. Avan√ßado
   - Cria√ß√£o de Dockerfile
   - Constru√ß√£o de imagens
   - Boas pr√°ticas

Em cada n√≠vel voc√™ receber√°:
‚úì Instru√ß√µes claras do que deve ser feito
‚úì Explica√ß√µes sobre cada conceito
‚úì Exemplos pr√°ticos
‚úì Dicas em caso de erro
‚úì Ajuda detalhada dos comandos
‚úì Feedback sobre suas a√ß√µes

Recomenda√ß√µes:
‚Ä¢ Leia atentamente as explica√ß√µes
‚Ä¢ Execute os comandos exatamente como mostrado
‚Ä¢ Use as dicas quando tiver d√∫vidas
‚Ä¢ Experimente os comandos adicionais sugeridos"

    # Verifica√ß√£o inicial de requisitos
    if ! check_requirements; then
        show_error "Falha na verifica√ß√£o de requisitos. Corrija os problemas e tente novamente."
        exit 1
    fi

    # N√≠vel 1
    read -p "Pressione Enter para come√ßar o N√≠vel 1 (B√°sico)..."
    if ! nivel_1; then
        show_error "Erro ao completar o N√≠vel 1"
        show_tip "Revise os conceitos b√°sicos e tente novamente"
        exit 1
    fi
    
    show_section "üéâ N√≠vel 1 Conclu√≠do!"
    show_explanation "Voc√™ j√° sabe:
‚úì Baixar imagens do Docker Hub
‚úì Criar e executar containers
‚úì Listar containers em execu√ß√£o
‚úì Parar e remover containers
‚úì Gerenciar imagens locais"
    
    # N√≠vel 2
    read -p "Pressione Enter para continuar para o N√≠vel 2 (Intermedi√°rio)..."
    if ! nivel_2; then
        show_error "Erro ao completar o N√≠vel 2"
        show_tip "Revise os conceitos de volumes e redes e tente novamente"
        exit 1
    fi
    
    show_section "üéâ N√≠vel 2 Conclu√≠do!"
    show_explanation "Voc√™ j√° sabe:
‚úì Criar e gerenciar volumes
‚úì Persistir dados entre containers
‚úì Criar redes Docker
‚úì Conectar containers em rede
‚úì Usar vari√°veis de ambiente"
    
    # N√≠vel 3
    read -p "Pressione Enter para continuar para o N√≠vel 3 (Avan√ßado)..."
    if ! nivel_3; then
        show_error "Erro ao completar o N√≠vel 3"
        show_tip "Revise os conceitos de Dockerfile e tente novamente"
        exit 1
    fi

    # Mensagem final de conclus√£o
    show_section "üéä Parab√©ns! Tutorial Conclu√≠do! üéä"
    
    show_success "Voc√™ completou com sucesso todos os n√≠veis do tutorial Docker!"
    
    show_explanation "Conceitos dominados:
‚úì Comandos b√°sicos do Docker
‚úì Gerenciamento de containers e imagens
‚úì Volumes para persist√™ncia de dados
‚úì Redes Docker para comunica√ß√£o
‚úì Cria√ß√£o de imagens com Dockerfile
‚úì Boas pr√°ticas de containeriza√ß√£o

Pr√≥ximos passos sugeridos:
1. Explore o Docker Compose para m√∫ltiplos containers
2. Aprenda sobre Docker Swarm para orquestra√ß√£o
3. Estude Kubernetes para ambientes mais complexos
4. Pratique criando seus pr√≥prios projetos
5. Aprenda sobre seguran√ßa em containers

Recursos adicionais:
‚Ä¢ Documenta√ß√£o oficial: https://docs.docker.com
‚Ä¢ Docker Hub: https://hub.docker.com
‚Ä¢ Docker GitHub: https://github.com/docker
‚Ä¢ Docker Blog: https://www.docker.com/blog"

    show_tip "Mantenha este script para refer√™ncia e pr√°tica adicional"
    
    echo -e "\n----------------------------------------\n"
}

# Execu√ß√£o do script
main
