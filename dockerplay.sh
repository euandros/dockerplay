#!/bin/bash

set -e

# Fun√ß√£o para validar se o comando foi realmente executado
validate_command_execution() {
    local expected_command=$1
    local actual_command
    
    # Obt√©m o √∫ltimo comando executado do hist√≥rico
    actual_command=$(history 1 | awk '{$1=""; print substr($0,2)}' | xargs)
    
    if [[ "$actual_command" != "$expected_command" ]]; then
        echo "‚ùå Comando incorreto executado!"
        echo "Esperado: $expected_command"
        echo "Executado: $actual_command"
        return 1
    fi
    return 0
}

# Fun√ß√£o para verificar comando e sa√≠da
check_command_and_output() {
    local expected_command=$1
    local expected_output=$2
    local error_message=$3
    local check_type=${4:-output}

    # Aguarda o usu√°rio executar o comando
    local command_executed=false
    while [ "$command_executed" = false ]; do
        echo "Execute o comando: $expected_command"
        read -p "Pressione Enter ap√≥s executar o comando..."
        if ! validate_command_execution "$expected_command"; then
            echo "Por favor, execute exatamente o comando solicitado."
            continue
        fi
        command_executed=true
    done

    # Verifica a sa√≠da do comando
    output=$(eval "$expected_command" 2>&1)
    return_code=$?

    if [ $return_code -ne 0 ]; then
        echo "‚ùå $error_message"
        echo "Sa√≠da do comando:"
        echo "$output"
        exit 1
    fi

    if [[ "$check_type" == "output" ]]; then
        if [[ ! "$output" =~ $expected_output ]]; then
            echo "‚ùå O comando foi executado, mas a sa√≠da n√£o √© a esperada."
            echo "Sa√≠da do comando:"
            echo "$output"
            echo "Sa√≠da esperada (contendo): $expected_output"
            exit 1
        fi
    elif [[ "$check_type" == "exists" ]]; then
        if [[ -z "$output" ]]; then
            echo "‚ùå $error_message"
            echo "Sa√≠da do comando:"
            echo "$output"
            exit 1
        fi
    fi
    echo "‚úÖ Comando executado com sucesso e sa√≠da/exist√™ncia validada!"
}

# --- N√≠vel 1 - B√°sico ---
nivel_1() {
    clear
    echo -e "\n### N√≠vel 1 - B√°sico ###"
    
    echo "1. Baixe a imagem 'hello-world' do Docker Hub."
    check_command_and_output "docker pull hello-world" \
        "Status: Downloaded newer image for hello-world:latest" \
        "Erro ao baixar a imagem. Verifique sua conex√£o e o nome."
    
    echo "2. Execute a imagem 'hello-world'."
    check_command_and_output "docker run hello-world" \
        "Hello from Docker!" \
        "Erro ao executar a imagem."
    
    echo "3. Liste os cont√™ineres em execu√ß√£o."
    check_command_and_output "docker ps" \
        "CONTAINER ID" \
        "Erro ao listar cont√™ineres."
    
    echo "4. Execute um cont√™iner Ubuntu interativo e em background."
    check_command_and_output "docker run -it -d --name meu_ubuntu ubuntu bash" \
        "" \
        "Erro ao criar o cont√™iner."
    
    echo "5. Verifique se o cont√™iner est√° rodando."
    check_command_and_output "docker ps" \
        "meu_ubuntu" \
        "Cont√™iner n√£o est√° rodando."
    
    echo "6. Pare o cont√™iner."
    check_command_and_output "docker stop meu_ubuntu" \
        "meu_ubuntu" \
        "Erro ao parar o cont√™iner."
    
    echo "7. Remova o cont√™iner."
    check_command_and_output "docker rm meu_ubuntu" \
        "meu_ubuntu" \
        "Erro ao remover o cont√™iner."
    
    echo "8. Remova a imagem 'hello-world'."
    check_command_and_output "docker rmi hello-world" \
        "Untagged: hello-world:latest" \
        "Erro ao remover a imagem."
    
    echo "üéâ N√≠vel 1 conclu√≠do!"
}

# --- N√≠vel 2 - Intermedi√°rio ---
nivel_2() {
    clear
    echo -e "\n### N√≠vel 2 - Intermedi√°rio ###"

    local VOLUME_NAME="meu_volume"
    local CONTAINER_NAME="meu_container"

    echo "1. Crie um volume chamado '$VOLUME_NAME'."
    check_command_and_output "docker volume create $VOLUME_NAME" \
        "$VOLUME_NAME" \
        "Erro ao criar o volume."

    echo "2. Liste os volumes para verificar a cria√ß√£o."
    check_command_and_output "docker volume ls" \
        "$VOLUME_NAME" \
        "Volume n√£o encontrado." \
        "exists"

    echo "3. Execute um cont√™iner com o volume."
    check_command_and_output "docker run -d -v $VOLUME_NAME:/data --name $CONTAINER_NAME ubuntu tail -f /dev/null" \
        "" \
        "Erro ao criar o cont√™iner com volume."

    echo "4. Verifique se o cont√™iner est√° rodando."
    check_command_and_output "docker ps" \
        "$CONTAINER_NAME" \
        "Cont√™iner n√£o est√° rodando." \
        "exists"

    echo "5. Crie um arquivo no volume."
    check_command_and_output "docker exec $CONTAINER_NAME touch /data/meu_arquivo.txt" \
        "" \
        "Erro ao criar arquivo no volume."

    echo "6. Verifique se o arquivo foi criado."
    check_command_and_output "docker exec $CONTAINER_NAME ls /data" \
        "meu_arquivo.txt" \
        "Arquivo n√£o encontrado." \
        "exists"

    echo "7. Pare e remova o cont√™iner."
    check_command_and_output "docker stop $CONTAINER_NAME" \
        "$CONTAINER_NAME" \
        "Erro ao parar o cont√™iner."
    check_command_and_output "docker rm $CONTAINER_NAME" \
        "$CONTAINER_NAME" \
        "Erro ao remover o cont√™iner."

    echo "8. Crie um novo cont√™iner para verificar a persist√™ncia do volume."
    check_command_and_output "docker run --rm -v $VOLUME_NAME:/data ubuntu ls /data" \
        "meu_arquivo.txt" \
        "Arquivo n√£o persistiu no volume."

    echo "9. Crie uma rede personalizada."
    check_command_and_output "docker network create minha_rede" \
        "minha_rede" \
        "Erro ao criar a rede."

    echo "10. Execute um cont√™iner nginx na rede criada."
    check_command_and_output "docker run -d --name nginx_rede --network minha_rede nginx" \
        "" \
        "Erro ao criar cont√™iner na rede."

    echo "11. Verifique a conex√£o do cont√™iner √† rede."
    check_command_and_output "docker network inspect minha_rede" \
        "nginx_rede" \
        "Cont√™iner n√£o est√° conectado √† rede." \
        "exists"

    echo "12. Teste vari√°veis de ambiente."
    check_command_and_output "docker run -d -e MINHA_VAR=teste --name container_env ubuntu tail -f /dev/null" \
        "" \
        "Erro ao criar cont√™iner com vari√°vel de ambiente."
    check_command_and_output "docker exec container_env printenv MINHA_VAR" \
        "teste" \
        "Vari√°vel de ambiente n√£o encontrada."

    echo "üéâ N√≠vel 2 conclu√≠do!"

    # Limpeza
    echo "Realizando limpeza..."
    docker stop nginx_rede container_env 2>/dev/null || true
    docker rm nginx_rede container_env 2>/dev/null || true
    docker volume rm $VOLUME_NAME 2>/dev/null || true
    docker network rm minha_rede 2>/dev/null || true
}

# --- N√≠vel 3 - Dockerfile ---
nivel_3() {
    clear
    echo -e "\n### N√≠vel 3 - Avan√ßado (Dockerfile) ###"

    echo "1. Criando arquivos necess√°rios..."
    
    # Criar arquivo Python de exemplo
    echo "Criando app.py..."
    cat <<EOF > app.py
# app.py (exemplo simples)
print("Ol√° do meu app Python!")
EOF

    # Criar requirements.txt
    echo "Criando requirements.txt..."
    cat <<EOF > requirements.txt
# requirements.txt (vazio para este exemplo)
EOF

    echo "2. Crie um Dockerfile com as seguintes instru√ß√µes:"
    echo "- Use python:3.9 como imagem base"
    echo "- Defina /app como diret√≥rio de trabalho"
    echo "- Copie app.py e requirements.txt"
    echo "- Instale as depend√™ncias"
    echo "- Configure o comando para executar app.py"
    
    # Aguarda o usu√°rio criar o Dockerfile
    while true; do
        echo "Verifique se o Dockerfile foi criado corretamente..."
        read -p "Pressione Enter ap√≥s criar o Dockerfile..."
        
        if [ ! -f "Dockerfile" ]; then
            echo "‚ùå Dockerfile n√£o encontrado!"
            continue
        fi  # Corrigido: removida a chave extra e adicionado 'fi'

        # Verifica cada instru√ß√£o necess√°ria
        local dockerfile_valid=true
        
        if ! grep -q "^FROM python:3\.9$" Dockerfile; then
            echo "‚ùå Erro: FROM python:3.9 n√£o encontrado ou incorreto"
            dockerfile_valid=false
        fi
        
        if ! grep -q "^WORKDIR /app$" Dockerfile; then
            echo "‚ùå Erro: WORKDIR /app n√£o encontrado ou incorreto"
            dockerfile_valid=false
        fi
        
        if ! grep -q "^COPY app\.py \.$" Dockerfile; then
            echo "‚ùå Erro: COPY app.py . n√£o encontrado ou incorreto"
            dockerfile_valid=false
        fi
        
        if ! grep -q "^COPY requirements\.txt \.$" Dockerfile; then
            echo "‚ùå Erro: COPY requirements.txt . n√£o encontrado ou incorreto"
            dockerfile_valid=false
        fi
        
        if ! grep -q "^RUN pip install --no-cache-dir -r requirements\.txt$" Dockerfile; then
            echo "‚ùå Erro: RUN pip install n√£o encontrado ou incorreto"
            dockerfile_valid=false
        fi
        
        if ! grep -q '^CMD \["python", "app\.py"\]$' Dockerfile; then
            echo "‚ùå Erro: CMD ["python", "app.py"] n√£o encontrado ou incorreto"
            dockerfile_valid=false
        fi

        if [ "$dockerfile_valid" = true ]; then
            echo "‚úÖ Dockerfile validado com sucesso!"
            break
        fi
        
        echo "Por favor, corrija os erros e tente novamente."
    done

    echo "3. Construa a imagem 'meu_app'."
    check_command_and_output "docker build -t meu_app ." \
        "Successfully built" \
        "Erro ao construir a imagem."

    echo "4. Verifique se a imagem foi criada."
    check_command_and_output "docker images" \
        "meu_app" \
        "Imagem n√£o encontrada." \
        "exists"

    echo "5. Execute a imagem em um novo cont√™iner."
    check_command_and_output "docker run --name meu_app_container meu_app" \
        "Ol√° do meu app Python!" \
        "Erro ao executar o cont√™iner."

    echo "6. Verifique os logs do cont√™iner."
    check_command_and_output "docker logs meu_app_container" \
        "Ol√° do meu app Python!" \
        "Logs incorretos."

    echo "7. Inspecione o cont√™iner."
    check_command_and_output "docker inspect meu_app_container" \
        "\"Running\":false" \
        "Cont√™iner ainda em execu√ß√£o."

    echo "8. Remova o cont√™iner."
    check_command_and_output "docker rm meu_app_container" \
        "meu_app_container" \
        "Erro ao remover o cont√™iner."

    echo "9. Remova a imagem."
    check_command_and_output "docker rmi meu_app" \
        "Untagged: meu_app:latest" \
        "Erro ao remover a imagem."

    echo "üéâ N√≠vel 3 conclu√≠do!"

    # Limpeza
    echo "Realizando limpeza..."
    rm -f app.py requirements.txt Dockerfile 2>/dev/null || true
}

# --- N√≠vel 4 - Docker Compose ---
nivel_4() {
    clear
    echo -e "\n### N√≠vel 4 - Docker Compose ###"

    echo "1. Criando arquivo docker-compose.yml..."
    cat <<EOF > docker-compose.yml
version: '3.9'
services:
  web:
    image: nginx:latest
    ports:
      - "8081:80"
    depends_on:
      - db
  db:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: mysecretpassword
    volumes:
      - db_data:/var/lib/postgresql/data
volumes:
  db_data:
EOF

    echo "2. Verifique se o Docker Compose est√° instalado."
    check_command_and_output "docker-compose version" \
        "docker-compose version" \
        "Docker Compose n√£o est√° instalado."

    echo "3. Valide o arquivo docker-compose.yml."
    check_command_and_output "docker-compose config" \
        "services" \
        "Erro de sintaxe no arquivo docker-compose.yml."

    echo "4. Liste os servi√ßos definidos."
    check_command_and_output "docker-compose ps" \
        "" \
        "Erro ao listar servi√ßos."

    echo "5. Inicie os servi√ßos em background."
    check_command_and_output "docker-compose up -d" \
        "Creating" \
        "Erro ao iniciar os servi√ßos."

    echo "6. Verifique se os servi√ßos est√£o rodando."
    check_command_and_output "docker-compose ps" \
        "Up" \
        "Servi√ßos n√£o est√£o rodando." \
        "exists"

    echo "7. Verifique os logs dos servi√ßos."
    check_command_and_output "docker-compose logs --tail=10" \
        "" \
        "Erro ao verificar logs."

    echo "8. Verifique o status do banco de dados."
    check_command_and_output "docker-compose exec db pg_isready" \
        "accepting connections" \
        "Banco de dados n√£o est√° pronto."

    echo "9. Teste o acesso ao Nginx."
    check_command_and_output "curl -I localhost:8081" \
        "HTTP/1.1 200 OK" \
        "Nginx n√£o est√° respondendo."

    echo "10. Pare os servi√ßos."
    check_command_and_output "docker-compose down" \
        "Removing" \
        "Erro ao parar os servi√ßos."

    echo "11. Verifique se os servi√ßos foram parados."
    check_command_and_output "docker-compose ps" \
        "" \
        "Ainda existem servi√ßos rodando."

    echo "üéâ N√≠vel 4 conclu√≠do!"

    # Limpeza
    echo "Realizando limpeza..."
    docker-compose down -v 2>/dev/null || true
    rm -f docker-compose.yml 2>/dev/null || true
}

# --- N√≠vel 5 - Docker Swarm ---
nivel_5() {
    clear
    echo -e "\n### N√≠vel 5 - Docker Swarm ###"

    echo "1. Verifique o status atual do Swarm."
    check_command_and_output "docker info | grep Swarm" \
        "Swarm: inactive" \
        "Swarm j√° est√° ativo. Por favor, desative-o primeiro."

    echo "2. Inicialize o Swarm."
    check_command_and_output "docker swarm init" \
        "Swarm initialized" \
        "Erro ao inicializar o Swarm."

    echo "3. Verifique os n√≥s do Swarm."
    check_command_and_output "docker node ls" \
        "Leader" \
        "N√≥ l√≠der n√£o encontrado."

    echo "4. Crie um servi√ßo com 3 r√©plicas."
    check_command_and_output "docker service create --name meu_servico --replicas 3 nginx" \
        "created" \
        "Erro ao criar o servi√ßo."

    echo "5. Verifique o status do servi√ßo."
    check_command_and_output "docker service ls" \
        "meu_servico" \
        "Servi√ßo n√£o encontrado."

    echo "6. Aguarde as r√©plicas iniciarem..."
    sleep 10
    check_command_and_output "docker service ps meu_servico" \
        "Running" \
        "R√©plicas n√£o est√£o rodando."

    echo "7. Escale o servi√ßo para 5 r√©plicas."
    check_command_and_output "docker service scale meu_servico=5" \
        "scaled to 5" \
        "Erro ao escalar o servi√ßo."

    echo "8. Aguarde o escalonamento..."
    sleep 10
    check_command_and_output "docker service ps meu_servico" \
        "Running" \
        "Nem todas as r√©plicas est√£o rodando."

    echo "9. Remova o servi√ßo."
    check_command_and_output "docker service rm meu_servico" \
        "meu_servico" \
        "Erro ao remover o servi√ßo."

    echo "10. Deixe o modo Swarm."
    check_command_and_output "docker swarm leave --force" \
        "Node left the swarm" \
        "Erro ao sair do Swarm."

    echo "üéâ N√≠vel 5 conclu√≠do!"
}

# Verifica√ß√µes iniciais
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado. Por favor, instale o Docker."
    exit 1
fi

if ! docker info &> /dev/null; then
    echo "‚ùå O daemon do Docker n√£o est√° rodando. Por favor, inicie o Docker."
    exit 1
fi

# Execu√ß√£o principal
echo "üöÄ Iniciando tutorial interativo do Docker..."
nivel_1
nivel_2
nivel_3
nivel_4
nivel_5

# Mensagem final
echo -e "\nüéä Parab√©ns! Voc√™ completou todos os n√≠veis do tutorial Docker! üéä"
echo "Voc√™ aprendeu sobre:"
echo "‚úÖ Comandos b√°sicos do Docker"
echo "‚úÖ Volumes e redes"
echo "‚úÖ Cria√ß√£o de imagens com Dockerfile"
echo "‚úÖ Orquestra√ß√£o com Docker Compose"
echo "‚úÖ Clustering com Docker Swarm"
